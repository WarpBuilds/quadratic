name: QA

on:
  pull_request:
    branches:
      # - main
      - qa
    types: [opened, synchronize, reopened]

# Use runs on `ubuntu-latest-8-cores`. All of our self hosted runners use this tag.
# Our runners pick up jobs first, and if all our runners are being used or are down
# it will automatically back up to using GitHub hosted runners.

# Require previous builds and deployments to finish before starting a new one
# Not sure how Pulumi would handle being terminated when changing a stack.
concurrency:
  group: qa

jobs:
  build_images:
    name: Build Images
    runs-on: ${{ matrix.runner }}
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - service: client
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: api
            runner: blacksmith-2vcpu-ubuntu-2204
          - service: connection
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: files
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: multiplayer
            runner: blacksmith-4vcpu-ubuntu-2204
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Metadata
        id: build-metadata
        run: |
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "GIT_SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo "${{ github.head_ref }}" | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Define repository name
        id: repo-name
        run: |
          echo "REPO_NAME=quadratic-${{ matrix.service }}-development" >> $GITHUB_OUTPUT

      - name: Create Private ECR Repository
        id: create-ecr
        env:
          REPO_NAME: ${{ steps.repo-name.outputs.REPO_NAME }}
        run: |
          # Try to describe the repository first
          if ! aws ecr describe-repositories --repository-names $REPO_NAME 2>/dev/null; then
            # Repository doesn't exist, create it
            aws ecr create-repository --repository-name $REPO_NAME || true
          fi

          # Get the repository URI either way
          REPO_INFO=$(aws ecr describe-repositories --repository-names $REPO_NAME)
          ECR_URL=$(echo $REPO_INFO | jq -r '.repositories[0].repositoryUri')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-qa-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-qa
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.create-ecr.outputs.ECR_URL }}:pr-qa-github-actions
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            BUILD_TIME=${{ steps.build-metadata.outputs.BUILD_TIME }}
            GIT_SHA_SHORT=${{ steps.build-metadata.outputs.GIT_SHA_SHORT }}
            BRANCH_NAME=${{ steps.build-metadata.outputs.BRANCH_NAME }}
            PR_NUMBER=${{ github.event.pull_request.number }}
          labels: |
            org.opencontainers.image.created=${{ steps.build-metadata.outputs.BUILD_TIME }}
            org.opencontainers.image.revision=${{ github.sha }}

  amplify:
    needs: [build_images]
    name: Deploy Client to Amplify
    runs-on: blacksmith-2vcpu-ubuntu-2204
    # if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cancel Pending Deployments
        run: |
          # List and cancel any pending jobs with improved error handling
          echo "Checking for pending Amplify jobs..."
          if ! JOBS=$(aws amplify list-jobs \
            --app-id ${{ secrets.AWS_AMPLIFY_APP_ID_DEVELOPMENT }} \
            --branch-name ${{ github.head_ref }} \
            --output json); then
            echo "Failed to list Amplify jobs. Continuing anyway..."
          else
            # Count pending/running jobs for better visibility
            PENDING_COUNT=$(echo "$JOBS" | jq -r '.jobSummaries[] | select(.status == "PENDING" or .status == "RUNNING") | .jobId' | wc -l)
            echo "Found $PENDING_COUNT pending or running jobs"
            
            # Cancel jobs with timeout and status reporting
            echo "$JOBS" | jq -r '.jobSummaries[] | select(.status == "PENDING" or .status == "RUNNING") | "\(.jobId) \(.status) \(.jobType)"' | \
            while read -r JOB_ID STATUS TYPE; do
              echo "Cancelling $TYPE job $JOB_ID (status: $STATUS)"
              if aws amplify stop-job \
                --app-id ${{ secrets.AWS_AMPLIFY_APP_ID_DEVELOPMENT }} \
                --job-id "$JOB_ID"; then
                echo "✓ Successfully cancelled job $JOB_ID"
              else
                echo "⚠️ Failed to cancel job $JOB_ID, but continuing"
              fi
            done
            
            # Verify jobs were stopped - optional check
            echo "Verifying jobs are no longer running..."
            sleep 2
            REMAINING=$(aws amplify list-jobs \
              --app-id ${{ secrets.AWS_AMPLIFY_APP_ID_DEVELOPMENT }} \
              --branch-name ${{ github.head_ref }} \
              --output json | jq -r '.jobSummaries[] | select(.status == "PENDING" or .status == "RUNNING") | .jobId' | wc -l)
            echo "$REMAINING jobs still pending or running"
          fi

      - name: Trigger New Deployment
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AWS_AMPLIFY_APP_ID_DEVELOPMENT }} \
            --branch-name ${{ github.head_ref }} \
            --job-type RELEASE

  pulumi:
    needs: [build_images]
    name: Create or Update Pulumi Infrastructure Stack
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - uses: pulumi/actions@v4

      - name: Update Pulumi Infrastructure
        working-directory: infra
        run: |
          npm ci

          pulumi org set-default quadratic

          STACK_NAME="quadratic-qa"
          if ! pulumi stack ls | grep -q "^$STACK_NAME"; then
            echo "Stack $STACK_NAME does not exist. Initializing..."
            pulumi stack init $STACK_NAME
          else
            echo "Stack $STACK_NAME already exists."
            pulumi stack select $STACK_NAME
          fi

          # Point to the Pulumi ESC Environment
          cat <<EOF | tee Pulumi.$STACK_NAME.yaml
          environment:
            - aws-infra-development
          EOF

          pulumi config set multiplayer-subdomain multiplayer-pr-qa
          pulumi config set files-subdomain files-pr-qa
          pulumi config set connection-subdomain connection-pr-qa
          pulumi config set docker-image-tag pr-qa
          pulumi config set quadratic-api-uri https://quadratic-staging.herokuapp.com
          pulumi config set is-preview true

          pulumi up -y
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PR_ID: ${{ github.event.pull_request.number }}
