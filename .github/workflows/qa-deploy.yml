name: QA

on:
  pull_request:
    branches:
      # - main
      - qa
    types: [opened, synchronize, reopened]

concurrency:
  group: qa

env:
  AMPLIFY_APP_ID_DEVELOPMENT: d3dmk4wdzzskoq
  AMPLIFY_BUCKET_NAME_DEVELOPMENT: quadratic-development-amplify

jobs:
  build_client:
    name: Build Client
    runs-on: blacksmith-4vcpu-ubuntu-2204
    # if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    outputs:
      s3-dir: ${{ steps.upload-to-s3.outputs.s3-dir }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Create a hash of the environment variables, as a cache buster
      - name: Pull Pulumi ESC Environment Variables
        id: pull-pulumi-esc-env-vars
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ESC_ENVIRONMENT_NAME: quadratic-client-development
        run: |
          # Install Pulumi ESC CLI
          curl -fsSL https://get.pulumi.com/esc/install.sh | sh
          export PATH="$HOME/.pulumi/bin:$PATH"

          # Login and get environment variables
          esc login
          ENV_VARS=$(esc env open quadratic/${PULUMI_ESC_ENVIRONMENT_NAME} --format dotenv)

          # Write to client.env file to be used in Dockerfile
          echo "$ENV_VARS" > ./client.env
          # Remove quotes if present
          sed -i 's/"//g' ./client.env

          # Create hash from environment variables
          ENV_HASH=$(echo "$ENV_VARS" | sha256sum | cut -d' ' -f1)
          echo "env-hash=$ENV_HASH" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-client-${{ hashFiles('quadratic-client/Dockerfile') }}-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-client-${{ hashFiles('quadratic-client/Dockerfile') }}-${{ github.head_ref }}-
            ${{ runner.os }}-buildx-client-${{ hashFiles('quadratic-client/Dockerfile') }}-

      - name: Build using Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-client/Dockerfile
          push: false
          load: true
          tags: quadratic-client:local
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            ENV_HASH=${{ steps.pull-pulumi-esc-env-vars.outputs.env-hash }}
          outputs: type=docker

      - name: Copy build from container to host
        run: |
          # Create a temporary container from the image
          CONTAINER_ID=$(docker create quadratic-client:local)

          # Create a temporary directory to hold the build
          mkdir -p /tmp/quadratic-client

          # Copy the build files from the container using the correct path
          docker cp $CONTAINER_ID:/usr/share/nginx/html/. /tmp/quadratic-client/

          # Clean up the temporary container
          docker rm $CONTAINER_ID

      - name: Upload to S3
        id: upload-to-s3
        run: |
          COMMIT_HASH="${{ github.event.pull_request.head.sha }}"

          # S3 build directory
          S3_DIR="s3://${AMPLIFY_BUCKET_NAME_DEVELOPMENT}/quadratic-client-${COMMIT_HASH}/"

          # Upload entire build directory to S3 with no caching for Amplify
          aws s3 sync /tmp/quadratic-client/ $S3_DIR --delete

          echo "s3-dir=$S3_DIR" >> $GITHUB_OUTPUT

  build_images:
    name: Build Images
    runs-on: ${{ matrix.runner }}
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - service: api
            runner: blacksmith-2vcpu-ubuntu-2204
          - service: connection
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: files
            runner: blacksmith-4vcpu-ubuntu-2204
          - service: multiplayer
            runner: blacksmith-4vcpu-ubuntu-2204
      fail-fast: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Build Metadata
        id: build-metadata
        run: |
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "GIT_SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo "${{ github.head_ref }}" | tr '/' '-')" >> $GITHUB_OUTPUT

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create Private ECR Repository
        id: create-ecr
        run: |
          REPO_NAME=quadratic-${{ matrix.service }}-development

          # Try to describe the repository first
          if ! aws ecr describe-repositories --repository-names $REPO_NAME 2>/dev/null; then
            # Repository doesn't exist, create it
            aws ecr create-repository --repository-name $REPO_NAME || true
          fi

          # Get the repository URI either way
          REPO_INFO=$(aws ecr describe-repositories --repository-names $REPO_NAME)
          ECR_URL=$(echo $REPO_INFO | jq -r '.repositories[0].repositoryUri')
          echo "ECR_URL=$ECR_URL" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: useblacksmith/cache@v5
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-${{ github.head_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-${{ github.head_ref }}
            ${{ runner.os }}-buildx-${{ matrix.service }}-${{ hashFiles(format('quadratic-{0}/Dockerfile', matrix.service)) }}-

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: quadratic-${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.create-ecr.outputs.ECR_URL }}:pr-qa
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          build-args: |
            BUILD_TIME=${{ steps.build-metadata.outputs.BUILD_TIME }}
            GIT_SHA_SHORT=${{ steps.build-metadata.outputs.GIT_SHA_SHORT }}
            BRANCH_NAME=${{ steps.build-metadata.outputs.BRANCH_NAME }}
            PR_NUMBER=${{ github.event.pull_request.number }}
          labels: |
            org.opencontainers.image.created=${{ steps.build-metadata.outputs.BUILD_TIME }}
            org.opencontainers.image.revision=${{ github.sha }}

  amplify:
    # needs: [build_client, build_images]
    needs: [build_client]
    name: Deploy Client to Amplify
    runs-on: blacksmith-2vcpu-ubuntu-2204
    # if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    steps:
      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Cancel Pending Deployments
        run: |
          # List and cancel any pending jobs with improved error handling
          echo "Checking for pending Amplify jobs..."
          if ! JOBS=$(aws amplify list-jobs \
            --app-id ${{ env.AMPLIFY_APP_ID_DEVELOPMENT }} \
            --branch-name ${{ github.head_ref }} \
            --output json); then
            echo "Failed to list Amplify jobs. Continuing anyway..."
          else
            # Count pending/running jobs for better visibility
            PENDING_COUNT=$(echo "$JOBS" | jq -r '.jobSummaries[] | select(.status == "PENDING" or .status == "RUNNING") | .jobId' | wc -l)
            echo "Found $PENDING_COUNT pending or running jobs"
            
            # Cancel jobs with timeout and status reporting
            echo "$JOBS" | jq -r '.jobSummaries[] | select(.status == "PENDING" or .status == "RUNNING") | "\(.jobId) \(.status) \(.jobType)"' | \
            while read -r JOB_ID STATUS TYPE; do
              echo "Cancelling $TYPE job $JOB_ID (status: $STATUS)"
              if aws amplify stop-job \
                --app-id ${{ env.AMPLIFY_APP_ID_DEVELOPMENT }} \
                --branch-name ${{ github.head_ref }} \
                --job-id "$JOB_ID"; then
                echo "✓ Successfully cancelled job $JOB_ID"
              else
                echo "⚠️ Failed to cancel job $JOB_ID, but continuing"
              fi
            done
            
            # Verify jobs were stopped - optional check
            echo "Verifying jobs are no longer running..."
            sleep 2
            REMAINING=$(aws amplify list-jobs \
              --app-id ${{ env.AMPLIFY_APP_ID_DEVELOPMENT }} \
              --branch-name ${{ github.head_ref }} \
              --output json | jq -r '.jobSummaries[] | select(.status == "PENDING" or .status == "RUNNING") | .jobId' | wc -l)
            echo "$REMAINING jobs still pending or running"
          fi

      - name: Create New Deployment
        run: |
          aws amplify start-deployment \
            --app-id ${{ env.AMPLIFY_APP_ID_DEVELOPMENT }} \
            --branch-name ${{ github.head_ref }} \
            --source-url ${{ needs.build_client.outputs.s3-dir }} \
            --source-url-type "BUCKET_PREFIX"

  pulumi:
    needs: [build_client, build_images]
    name: Create or Update Pulumi Infrastructure Stack
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    timeout-minutes: 30
    env:
      STACK_NAME: quadratic-qa
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Pulumi
        uses: pulumi/actions@v4

      - name: Update Pulumi Infrastructure
        working-directory: infra
        run: |
          npm ci

          pulumi org set-default quadratic

          if ! pulumi stack ls | grep -q "^$STACK_NAME"; then
            echo "Stack $STACK_NAME does not exist. Initializing..."
            pulumi stack init $STACK_NAME
          else
            echo "Stack $STACK_NAME already exists."
            pulumi stack select $STACK_NAME
          fi

          # Point to the Pulumi ESC Environment
          cat <<EOF | tee Pulumi.$STACK_NAME.yaml
          environment:
            - aws-infra-development
          EOF

          pulumi config set multiplayer-subdomain multiplayer-pr-qa
          pulumi config set files-subdomain files-pr-qa
          pulumi config set connection-subdomain connection-pr-qa
          pulumi config set docker-image-tag pr-qa
          pulumi config set quadratic-api-uri https://quadratic-staging.herokuapp.com
          pulumi config set is-preview true

          pulumi up -y
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEVELOPMENT }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEVELOPMENT }}
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PR_ID: ${{ github.event.pull_request.number }}

  qa-wolf-notify:
    needs: [amplify, pulumi]
    name: Notify QA Wolf
    runs-on: blacksmith-2vcpu-ubuntu-2204
    if: github.head_ref == 'qa' && github.base_ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Notify deploy_success
        id: run_tests
        run: |
          curl -H "Authorization: ${{ secrets.QAW_API_KEY }}" \
          -H 'Content-Type: application/json' \
          -d '{"branch": "qa", "deployment_type": "new_qa", "commit_url": "https://github.com/quadratichq/quadratic/commit/${{ github.sha }}", "sha": "${{ github.sha }}"}' \
          https://app.qawolf.com/api/webhooks/deploy_success
