// This file is automatically generated by quadratic-core/src/bin/export_types.rs
// Do not modify it manually.

export type CodeCellLanguage = "Python" | "Formula";
export interface JsHtmlOutput { sheet_id: string, x: bigint, y: bigint, html: string, w: string | null, h: string | null, }
export interface JsCodeCell { x: bigint, y: bigint, code_string: string, language: CodeCellLanguage, std_out: string | null, std_err: string | null, evaluation_result: string | null, spill_error: Array<Pos> | null, }
export interface JsRenderCodeCell { x: number, y: number, w: number, h: number, language: CodeCellLanguage, state: JsRenderCodeCellState, spill_error: Array<Pos> | null, }
export type JsRenderCodeCellState = "NotYetRun" | "RunError" | "SpillError" | "Success";
export type JsRenderCellSpecial = "Chart" | "SpillError" | "RunError" | "True" | "False";
export interface JsRenderCell { x: bigint, y: bigint, value: string, language?: CodeCellLanguage, align?: CellAlign, wrap?: CellWrap, bold?: boolean, italic?: boolean, textColor?: string, special: JsRenderCellSpecial | null, }
export type RangeRef = { "type": "RowRange", start: CellRefCoord, end: CellRefCoord, sheet: string | null, } | { "type": "ColRange", start: CellRefCoord, end: CellRefCoord, sheet: string | null, } | { "type": "CellRange", start: CellRef, end: CellRef, } | { "type": "Cell", pos: CellRef, };
export interface CellRef { sheet: string | null, x: CellRefCoord, y: CellRefCoord, }
export type CellRefCoord = { "type": "Relative", "coord": bigint } | { "type": "Absolute", "coord": bigint };
export type GridBounds = { "type": "empty" } | { "type": "nonEmpty" } & Rect;
export type CellAlign = "center" | "left" | "right";
export type CellWrap = "overflow" | "wrap" | "clip";
export interface NumericFormat { type: NumericFormatKind, symbol: string | null, }
export type NumericFormatKind = "NUMBER" | "CURRENCY" | "PERCENTAGE" | "EXPONENTIAL";
export interface BoolSummary { isAnyTrue: boolean, isAnyFalse: boolean, }
export interface SheetId { id: string, }
export interface JsRenderCell { x: bigint, y: bigint, value: string, language?: CodeCellLanguage, align?: CellAlign, wrap?: CellWrap, bold?: boolean, italic?: boolean, textColor?: string, special: JsRenderCellSpecial | null, }
export interface JsRenderFill { x: bigint, y: bigint, w: number, h: number, color: string, }
export interface FormattingSummary { bold: BoolSummary, italic: BoolSummary, }
export interface CellFormatSummary { bold: boolean | null, italic: boolean | null, textColor: string | null, fillColor: string | null, }
export interface JsClipboard { plainText: string, html: string, }
export interface ArraySize { w: number, h: number, }
export type Axis = "X" | "Y";
export interface Instant { seconds: number, }
export interface Duration { years: number, months: number, seconds: number, }
export interface RunError { span: Span | null, msg: RunErrorMsg, }
export type RunErrorMsg = { "PythonError": string } | "Spill" | "Unimplemented" | "UnknownError" | { "InternalError": string } | { "Unterminated": string } | { "Expected": { expected: string, got: string | null, } } | { "Unexpected": string } | { "TooManyArguments": { func_name: string, max_arg_count: number, } } | { "MissingRequiredArgument": { func_name: string, arg_name: string, } } | "BadFunctionName" | "BadCellReference" | "BadNumber" | { "ExactArraySizeMismatch": { expected: ArraySize, got: ArraySize, } } | { "ExactArrayAxisMismatch": { axis: Axis, expected: number, got: number, } } | { "ArrayAxisMismatch": { axis: Axis, expected: number, got: number, } } | "EmptyArray" | "NonRectangularArray" | "NonLinearArray" | "ArrayTooBig" | "CircularReference" | "Overflow" | "DivideByZero" | "NegativeExponent" | "NotANumber" | "Infinity" | "IndexOutOfBounds" | "NoMatch" | "InvalidArgument";
export interface Pos { x: bigint, y: bigint, }
export interface Rect { min: Pos, max: Pos, }
export interface Span { start: number, end: number, }
export interface SearchOptions { case_sensitive?: boolean, whole_cell?: boolean, search_code?: boolean, sheet_id?: string, }
export interface SheetPos { x: bigint, y: bigint, sheet_id: SheetId, }
export interface SheetInfo { sheet_id: string, name: string, order: string, color: string | null, offsets: string, bounds: GridBounds, bounds_without_formatting: GridBounds, }
export interface SheetOffsets { column_widths: Offsets, row_heights: Offsets, thumbnail: [bigint, bigint], }
export interface Offsets { default: number, sizes: Record<bigint, number>, }
