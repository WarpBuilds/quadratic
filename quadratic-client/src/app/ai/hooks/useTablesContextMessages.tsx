import { fileHasData } from '@/app/gridGL/helpers/fileHasData';
import { quadraticCore } from '@/app/web-workers/quadraticCore/quadraticCore';
import type { ChatMessage } from 'quadratic-shared/typesAndSchemasAI';
import { useCallback } from 'react';

export function useTablesContextMessages() {
  const getTablesContext = useCallback(async (): Promise<ChatMessage[]> => {
    if (!fileHasData()) {
      return [];
    }

    let tablesContext = await quadraticCore.getAITablesContext();
    if (!tablesContext) {
      return [];
    }

    tablesContext = tablesContext.filter(
      (tableContext) =>
        tableContext.data_tables.length > 0 || tableContext.code_tables.length > 0 || tableContext.charts.length > 0
    );
    if (tablesContext.length === 0) {
      return [];
    }

    return [
      {
        role: 'user',
        content: `
Note: This is an internal message for context. Do not quote it in your response.\n\n
Quadratic has following tables and chart support:\n
- Data tables: These are editable tables that contain data from file imports or user inputs.\n
- Code tables: These are read only tables that that are generated by running code in code cells.\n
- Charts: These are charts that are generated by running code in code cells.\n

All table and charts have a root cell which is the top left cell of the table or chart. Overwriting this remove the table or chart. Any error or spill in the table or chart is displayed at the root cell.\n
All these tables and charts have first row as table or chart name, respectively. This takes up 1 row of table height and can be hidden in the UI. When hidden, this does not take up any space in the sheet grid.\n
Data tables and code tables have column names after the table name (if visible). These take up the next row of table height. These can also be hidden in the UI. When hidden, this does not take up any space in the sheet grid.\n
The actual data starts after the table name and column names. This is a grid of cells with values for data table and code cells for code table. This a interactive chart for charts.\n
If there is any data present in the sheet where the table or chart is suppose to take place, it result into spill and the table or chart is displayed as spill error at the root cell of the table or chart.\n\n

\n\n
I am sharing data tables in the currently open file for reference as an array of objects described below:\n
Each data table has following properties:\n
- sheet_name: This is the name of the sheet.\n
- data_table_name: This is the name of the data table.\n
- all_columns: This is an array of all columns in the data table.\n
- visible_columns: This is an array of visible columns in the data table.\n
- first_row_visible_values: This is an array of visible values in the first row of the data table.\n
- bounds: This is the bounds of the data table in A1 notation, this includes the table name and column names if they are visible.\n
- show_name: This is a boolean value representing if the table name is visible.\n
- show_columns: This is a boolean value representing if the column names are visible.\n\n

first_row_visible_values is an array of objects with following properties:\n
- value: This is the value of the cell.\n
- kind: This is the kind of the value.\n
- pos: This is the position of the cell in A1 notation.\n\n

There are following data tables in the currently open file:\n
${tablesContext.map((tx) => {
  if (tx.data_tables.length === 0) {
    return 'There are no data tables in the currently open file.';
  }
  return `
\`\`\`json
${JSON.stringify(tx.data_tables)}
\`\`\`
`;
})}

\n\n
I am sharing code tables in the currently open file for reference as an array of objects described below:\n
Each code table has following properties:\n
- sheet_name: This is the name of the sheet.\n
- code_table_name: This is the name of the code table.\n
- all_columns: This is an array of all columns in the code table.\n
- visible_columns: This is an array of visible columns in the code table.\n
- first_row_visible_values: This is an array of visible values in the first row of the data table.\n
- bounds: This is the bounds of the data table in A1 notation, this includes the table name and column names if they are visible.\n
- show_name: This is a boolean value representing if the table name is visible.\n
- show_columns: This is a boolean value representing if the column names are visible.\n
- language: This is the language of the code code which outputs the table.\n
- code_string: This is the code in the code cell which outputs the table.\n
- std_err: This is the standard error of the after running the code, this is an optional property only if the code has an error.\n
- error: This is a boolean value representing if the code table has an error.\n
- spill: This is a boolean value representing if the code table has a spill.\n\n

first_row_visible_values is an array of objects with following properties:\n
- value: This is the value of the cell.\n
- kind: This is the kind of the value.\n
- pos: This is the position of the cell in A1 notation.\n\n

There are following code tables in the currently open file:\n
${tablesContext.map((tx) => {
  if (tx.code_tables.length === 0) {
    return 'There are no code tables in the currently open file.';
  }
  return `
\`\`\`json
${JSON.stringify(tx.code_tables)}
\`\`\`
`;
})}

\n\n
I am sharing charts in the currently open file for reference as an array of objects described below:\n
Each chart has following properties:\n
- sheet_name: This is the name of the sheet.\n
- chart_name: This is the name of the chart.\n
- bounds: This is the bounds of the chart in A1 notation.\n
- spill: This is a boolean value representing if the chart has a spill.\n\n

There are following charts in the currently open file:\n
${tablesContext.map((tx) => {
  if (tx.charts.length === 0) {
    return 'There are no charts in the currently open file.';
  }
  return `
\`\`\`json
${JSON.stringify(tx.charts)}
\`\`\`
`;
})}

Note: All this data is only for your reference to the tables and charts on the sheet. This data cannot be used directly in code. Use the cell reference function \`q.cells\`, i.e. \`q.cells(a1_notation_selection_string)\`, to reference data cells in code. Always use sheet name in a1 notation to reference cells. Sheet name is always enclosed in single quotes. In Python and Javascript, the complete a1 notation selection string is enclosed in double quotes. Example: \`q.cells("'Sheet 1'!A1:B2")\`. In formula, string quotes are not to be used. Example: \`=SUM('Sheet 1'!A1:B2)\`
    `,
        contextType: 'otherSheets',
      },
      {
        role: 'assistant',
        content: `I understand the other sheets data, I will reference it to answer following messages. How can I help you?`,
        contextType: 'otherSheets',
      },
    ];
  }, []);

  return { getTablesContext };
}
