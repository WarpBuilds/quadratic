// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "transaction.proto" (package "multiplayer", syntax proto3)
// tslint:disable
import type { BinaryReadOptions, BinaryWriteOptions, IBinaryReader, IBinaryWriter, PartialMessage } from "@protobuf-ts/runtime";
import { MessageType, reflectionMergePartial, UnknownFieldHandler, WireType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message multiplayer.SendTransaction
 */
export interface SendTransaction {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    session_id: string;
    /**
     * @generated from protobuf field: string file_id = 4;
     */
    file_id: string;
    /**
     * @generated from protobuf field: bytes operations = 5;
     */
    operations: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class SendTransaction$Type extends MessageType<SendTransaction> {
    constructor() {
        super("multiplayer.SendTransaction", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "session_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "file_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "operations", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SendTransaction>): SendTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.id = "";
        message.session_id = "";
        message.file_id = "";
        message.operations = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<SendTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendTransaction): SendTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* string id */ 2:
                    message.id = reader.string();
                    break;
                case /* string session_id */ 3:
                    message.session_id = reader.string();
                    break;
                case /* string file_id */ 4:
                    message.file_id = reader.string();
                    break;
                case /* bytes operations */ 5:
                    message.operations = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* string id = 2; */
        if (message.id !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.id);
        /* string session_id = 3; */
        if (message.session_id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.session_id);
        /* string file_id = 4; */
        if (message.file_id !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.file_id);
        /* bytes operations = 5; */
        if (message.operations.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.operations);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message multiplayer.SendTransaction
 */
export const SendTransaction = new SendTransaction$Type();
