use std::fs::create_dir_all;

use quadratic_core::{
    grid::{
        js_types::{
            JsCodeCell, JsHtmlOutput, JsRenderCell, JsRenderCellSpecial, JsRenderCodeCell,
            JsRenderCodeCellState,
        },
        sheet::search::SearchOptions,
        CodeCellLanguage,
    },
    sheet_offsets::{offsets::Offsets, SheetOffsets},
    wasm_bindings::controller::sheet_info::SheetInfo,
    Rect, *,
};
use ts_rs::TS;

macro_rules! generate_type_declarations {
    ($($type:ty),+ $(,)?) => {
        String::new() $(+ "export " + &<$type>::decl() + "\n")+
    };
}

fn main() {
    // TODO: autogenerate this file by parsing the whole project using `syn` and
    // searching for types annotated with `#[derive(TS)]`. This still won't work
    // for types generated by `macro_rules!` macros, so we'll have to handle
    // those some other way.
    let mut s = format!("// This file is automatically generated by {}\n", file!());
    s += "// Do not modify it manually.\n\n";

    s += &generate_type_declarations!(
        CodeCellLanguage,
        JsHtmlOutput,
        JsCodeCell,
        JsRenderCodeCell,
        JsRenderCodeCellState,
        JsRenderCellSpecial,
        JsRenderCell,
        formulas::RangeRef,
        formulas::CellRef,
        formulas::CellRefCoord,
        grid::GridBounds,
        grid::CellAlign,
        grid::CellWrap,
        grid::NumericFormat,
        grid::NumericFormatKind,
        grid::BoolSummary,
        grid::SheetId,
        grid::js_types::JsRenderCell,
        grid::js_types::JsRenderFill,
        grid::js_types::FormattingSummary,
        grid::js_types::CellFormatSummary,
        grid::js_types::JsClipboard,
        ArraySize,
        Axis,
        Instant,
        Duration,
        RunError,
        RunErrorMsg,
        Pos,
        Rect,
        Span,
        SearchOptions,
        SheetPos,
        SheetInfo,
        SheetOffsets,
        Offsets
    );

    if create_dir_all("../quadratic-client/src/quadratic-core-types").is_ok() {
        std::fs::write("../quadratic-client/src/quadratic-core-types/index.d.ts", s)
            .expect("failed to write types file");
    }
}
