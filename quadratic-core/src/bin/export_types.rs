use std::fs::create_dir_all;

use crate::grid::sheet::borders::{JsBorderHorizontal, JsBorderVertical, JsBordersSheet};
use crate::A1Error;
use controller::execution::run_code::get_cells::CellA1Response;
use controller::operations::clipboard::PasteSpecial;
use formulas::{CellRef, CellRefCoord, RangeRef};
use grid::formats::format::Format;
use grid::js_types::{
    CellFormatSummary, JsCellValue, JsClipboard, JsPos, JsRenderFill, JsRowHeight, JsSheetFill,
    JsValidationWarning,
};
use grid::sheet::borders::{BorderStyleCell, BorderStyleTimestamp};
use grid::sheet::validations::validation::{
    Validation, ValidationDisplay, ValidationDisplaySheet, ValidationError, ValidationMessage,
    ValidationStyle,
};
use grid::sheet::validations::validation_rules::validation_date_time::{
    DateTimeRange, ValidationDateTime,
};
use grid::sheet::validations::validation_rules::validation_list::{
    ValidationList, ValidationListSource,
};
use grid::sheet::validations::validation_rules::validation_logical::ValidationLogical;
use grid::sheet::validations::validation_rules::validation_number::{
    NumberRange, ValidationNumber,
};
use grid::sheet::validations::validation_rules::validation_text::{
    TextCase, TextMatch, ValidationText,
};
use grid::sheet::validations::validation_rules::ValidationRule;
use grid::JsCellsAccessed;
use grid::{
    CellAlign, CellVerticalAlign, CellWrap, GridBounds, NumericFormat, NumericFormatKind, SheetId,
};
use quadratic_core::color::Rgba;
use quadratic_core::controller::active_transactions::transaction_name::TransactionName;
use quadratic_core::controller::execution::run_code::get_cells::JsGetCellResponse;
use quadratic_core::controller::transaction_types::JsCodeResult;
use quadratic_core::grid::js_types::{
    JsCodeCell, JsHtmlOutput, JsNumber, JsRenderCell, JsRenderCellSpecial, JsRenderCodeCell,
    JsRenderCodeCellState,
};
use quadratic_core::grid::sheet::search::SearchOptions;
use quadratic_core::grid::{
    BorderSelection, BorderStyle, CellBorderLine, CodeCellLanguage, ConnectionKind,
};
use quadratic_core::selection::OldSelection;
use quadratic_core::sheet_offsets::resize_transient::TransientResize;
use quadratic_core::sheet_offsets::sheet_offsets_wasm::{ColumnRow, Placement};
use quadratic_core::wasm_bindings::controller::bounds::MinMax;
use quadratic_core::wasm_bindings::controller::sheet_info::{SheetBounds, SheetInfo};
use quadratic_core::wasm_bindings::controller::summarize::SummarizeSelectionResult;
use quadratic_core::{Rect, *};
use ts_rs::TS;

macro_rules! generate_type_declarations {
    ($($type:ty),+ $(,)?) => {
        String::new() $(+ "export " + &<$type>::decl() + "\n")+
    };
}

fn main() {
    // TODO: autogenerate this file by parsing the whole project using `syn` and
    // searching for types annotated with `#[derive(TS)]`. This still won't work
    // for types generated by `macro_rules!` macros, so we'll have to handle
    // those some other way.
    let mut s = format!("// This file is automatically generated by {}\n", file!());
    s += "// Do not modify it manually.\n\n";

    s += &generate_type_declarations!(
        A1Error,
        JsCellsAccessed,
        ArraySize,
        Axis,
        BorderSelection,
        BorderStyle,
        BorderStyleCell,
        BorderStyleTimestamp,
        CellAlign,
        CellBorderLine,
        CellFormatSummary,
        CellRef,
        CellRefCoord,
        CellVerticalAlign,
        CellWrap,
        CodeCellLanguage,
        ColumnRow,
        ConnectionKind,
        DateTimeRange,
        Duration,
        Format,
        GridBounds,
        Instant,
        JsBorderHorizontal,
        JsBorderVertical,
        JsBordersSheet,
        JsCellValue,
        JsClipboard,
        JsCodeCell,
        JsCodeResult,
        CellA1Response,
        JsGetCellResponse,
        JsHtmlOutput,
        JsNumber,
        JsPos,
        JsRenderCell,
        JsRenderCellSpecial,
        JsRenderCodeCell,
        JsRenderCodeCellState,
        JsRenderFill,
        JsRowHeight,
        JsSheetFill,
        JsValidationWarning,
        MinMax,
        NumberRange,
        NumericFormat,
        NumericFormatKind,
        PasteSpecial,
        Placement,
        Pos,
        RangeRef,
        Rect,
        Rgba,
        RunError,
        RunErrorMsg,
        SearchOptions,
        OldSelection,
        SheetBounds,
        SheetId,
        SheetInfo,
        SheetPos,
        SheetRect,
        Span,
        SummarizeSelectionResult,
        TextCase,
        TextMatch,
        TransactionName,
        TransientResize,
        Validation,
        ValidationDateTime,
        ValidationDisplay,
        ValidationDisplaySheet,
        ValidationError,
        ValidationList,
        ValidationListSource,
        ValidationLogical,
        ValidationMessage,
        ValidationNumber,
        ValidationRule,
        ValidationStyle,
        ValidationText
    );

    if create_dir_all("../quadratic-client/src/app/quadratic-core-types").is_ok() {
        std::fs::write(
            "../quadratic-client/src/app/quadratic-core-types/index.d.ts",
            s,
        )
        .expect("failed to write types file");
    }
}
