AWSTemplateFormatVersion: "2010-09-09"
Description: "Quadratic Selfhost Cloudformation Template"

Parameters:
  LicenseKey:
    Type: String
    Description: "Your license key for Quadratic. Get one here https://selfhost.quadratichq.com/"
  ImageTag:
    Type: String
    Description: "Image tag to use for all services"
    Default: "latest"

Mappings:
  EnvironmentConfig:
    Preview:
      DomainName: "quadratic-preview.com"
  RegionMap:
    us-west-2:
      AMI: "ami-05134c8ef96964280" # Example AMI for us-west-2 (Ubuntu 20.04)
    ap-south-1:
      AMI: "ami-0522ab6e1ddcc7055" # Example AMI for ap-south-1 (Ubuntu 24.04 LTS)

Resources:
  EC2Role:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeImages
                  - ecr:ListImages
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Roles:
        - !Ref EC2Role

  OpenSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      GroupDescription: !Sub "${ImageTag}"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: "443"
          ToPort: "443"
          CidrIp: "0.0.0.0/0"

  EC2Instance:
    Type: "AWS::EC2::Instance"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      InstanceType: "m6a.large"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref OpenSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: "25"
            VolumeType: "gp3"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Update and install dependencies
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common unzip jq

          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf aws awscliv2.zip

          # Install Docker
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Install Docker Compose
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Configure Docker
          sudo systemctl enable docker
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu

          # Export environment variables for docker-compose
          echo 'export ECR_URL="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com"' >> /home/ubuntu/.profile
          echo 'export IMAGE_TAG="${ImageTag}"' >> /home/ubuntu/.profile

          # Source the new environment variables
          source /home/ubuntu/.profile

          # Create login.sh script
          echo '#!/bin/bash
          aws ecr get-login-password --region ${AWS::Region} | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com' > /quadratic-selfhost/login.sh
          chmod +x /quadratic-selfhost/login.sh

          # Run Quadratic initialization
          curl -sSf https://raw.githubusercontent.com/quadratichq/quadratic-selfhost/main/init.sh -o init.sh && bash -i init.sh ${LicenseKey} ${ImageTag}.${!FindInMap [EnvironmentConfig, Preview, DomainName]}

  DnsRecords:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      HostedZoneName: !Sub "${!FindInMap [EnvironmentConfig, Preview, DomainName]}."
      Name: !Sub "${ImageTag}.${!FindInMap [EnvironmentConfig, Preview, DomainName]}"
      Type: A
      TTL: 300
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  WildcardDnsRecord:
    Type: AWS::Route53::RecordSet
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      HostedZoneName: !Sub "${!FindInMap [EnvironmentConfig, Preview, DomainName]}."
      Name: !Sub "*.${ImageTag}.${!FindInMap [EnvironmentConfig, Preview, DomainName]}"
      Type: A
      TTL: 300
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  EventBridgeRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeSsmAutomation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*"

  EcrPushRule:
    Type: AWS::Events::Rule
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    DependsOn:
      - EC2Instance
      - EventBridgeRole
    Properties:
      Description: "Rule to detect ECR image pushes"
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - "ECR Image Action"
        detail:
          action-type:
            - "PUSH"
          repository-name:
            - "quadratic-client-development"
            - "quadratic-api-development"
            - "quadratic-multiplayer-development"
            - "quadratic-files-development"
            - "quadratic-connection-development"
          image-tag:
            - !Ref ImageTag
      State: "ENABLED"
      Targets:
        - Arn: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/AWS-RunShellScript"
          Id: "TriggerScriptOnInstance"
          RoleArn: !GetAtt EventBridgeRole.Arn
          InputTransformer:
            InputPathsMap:
              "imageTag": "$.detail.image-tag"
              "repository": "$.detail.repository-name"
            InputTemplate: |
              {
                "InstanceIds": ["${EC2Instance.InstanceId}"],
                "DocumentName": "AWS-RunShellScript",
                "Parameters": {
                  "commands": [
                    "cd /quadratic-selfhost",
                    "./login.sh",
                    "./start.sh",
                  ]
                }
              }

Outputs:
  DomainRecord:
    Description: "Url of the selfhosted instance"
    Value: !Sub "${ImageTag}.${!FindInMap [EnvironmentConfig, Preview, DomainName]}"